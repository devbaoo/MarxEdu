import React, { useState } from 'react';
import { Card, Button, Input, Typography, Alert, Spin, Row, Col, Divider, Space } from 'antd';
import { 
  ExperimentOutlined, 
  SendOutlined, 
  CheckCircleOutlined,
  CloseCircleOutlined,
  BulbOutlined,
  ReloadOutlined
} from '@ant-design/icons';
import { useAppDispatch } from '@/services/store/store';
import { testGeminiConnection } from '@/services/features/marxist/marxistSlice';

const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;

const GeminiTestPage: React.FC = () => {
  const dispatch = useAppDispatch();
  
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');
  const [customPrompt, setCustomPrompt] = useState('');
  const [testResult, setTestResult] = useState<string | null>(null);
  const [isCustomTesting, setIsCustomTesting] = useState(false);

  const testConnection = async () => {
    setConnectionStatus('testing');
    try {
      await dispatch(testGeminiConnection()).unwrap();
      setConnectionStatus('success');
    } catch (error) {
      setConnectionStatus('error');
      console.error('Gemini connection test failed:', error);
    }
  };

  const testCustomPrompt = async () => {
    if (!customPrompt.trim()) return;
    
    setIsCustomTesting(true);
    setTestResult(null);
    
    try {
      // Simulate API call - replace with actual API call
      setTimeout(() => {
        setTestResult(`ƒê√¢y l√† k·∫øt qu·∫£ test t·ª´ Gemini AI v·ªõi prompt: "${customPrompt}"\n\nAI ƒë√£ ph·∫£n h·ªìi th√†nh c√¥ng v√† ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.`);
        setIsCustomTesting(false);
      }, 2000);
         } catch {
       setTestResult('L·ªói khi test custom prompt');
       setIsCustomTesting(false);
     }
  };

  const getStatusIcon = () => {
    switch (connectionStatus) {
      case 'testing': return <Spin />;
      case 'success': return <CheckCircleOutlined className="text-green-500" />;
      case 'error': return <CloseCircleOutlined className="text-red-500" />;
      default: return <ExperimentOutlined className="text-gray-500" />;
    }
  };

  const getStatusText = () => {
    switch (connectionStatus) {
      case 'testing': return 'ƒêang ki·ªÉm tra...';
      case 'success': return 'K·∫øt n·ªëi th√†nh c√¥ng';
      case 'error': return 'K·∫øt n·ªëi th·∫•t b·∫°i';
      default: return 'Ch∆∞a ki·ªÉm tra';
    }
  };

  const getStatusColor = (): 'success' | 'error' | 'info' | 'warning' => {
    switch (connectionStatus) {
      case 'success': return 'success';
      case 'error': return 'error';
      case 'testing': return 'info';
      default: return 'warning';
    }
  };

  const samplePrompts = [
    "T·∫°o m·ªôt c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ ch·ªß nghƒ©a t∆∞ b·∫£n",
    "Gi·∫£i th√≠ch kh√°i ni·ªám gi√° tr·ªã th·∫∑ng d∆∞ trong l√Ω thuy·∫øt Marx",
    "Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t v√† quan h·ªá s·∫£n xu·∫•t",
    "T·∫°o 5 c√¢u h·ªèi v·ªÅ ƒë·∫•u tranh giai c·∫•p v·ªõi ƒë·ªô kh√≥ trung b√¨nh"
  ];

  return (
    <div className="gemini-test-page p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <Title level={2} className="mb-2 text-red-700">
          <ExperimentOutlined className="mr-2" />
          Test Gemini AI Connection
        </Title>
        <Paragraph className="text-gray-600">
          Ki·ªÉm tra k·∫øt n·ªëi v√† ch·ª©c nƒÉng c·ªßa Google Gemini AI ƒë·ªÉ t·∫°o c√¢u h·ªèi Marxist
        </Paragraph>
      </div>

      {/* Connection Status */}
      <Row gutter={[24, 24]} className="mb-6">
        <Col xs={24} md={12}>
          <Card title="Tr·∫°ng th√°i k·∫øt n·ªëi" className="h-full">
            <div className="text-center py-6">
              <div className="text-6xl mb-4">
                {getStatusIcon()}
              </div>
              <Title level={4}>{getStatusText()}</Title>
              <Button 
                type="primary"
                size="large"
                icon={<ReloadOutlined />}
                onClick={testConnection}
                loading={connectionStatus === 'testing'}
                className="bg-red-600 hover:bg-red-700"
              >
                Ki·ªÉm tra k·∫øt n·ªëi
              </Button>
            </div>

            {connectionStatus !== 'idle' && (
              <Alert
                className="mt-4"
                type={getStatusColor()}
                message={
                  connectionStatus === 'success' 
                    ? 'Gemini AI ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng'
                    : connectionStatus === 'error' 
                    ? 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini AI'
                    : 'ƒêang ki·ªÉm tra k·∫øt n·ªëi...'
                }
                showIcon
              />
            )}
          </Card>
        </Col>

        <Col xs={24} md={12}>
          <Card title="Th√¥ng tin h·ªá th·ªëng" className="h-full">
            <Space direction="vertical" className="w-full">
              <div>
                <Text strong>API Endpoint: </Text>
                <Text code>https://generativelanguage.googleapis.com/v1beta/models/gemini-pro</Text>
              </div>
              <div>
                <Text strong>Model: </Text>
                <Text>Gemini Pro</Text>
              </div>
              <div>
                <Text strong>Timeout: </Text>
                <Text>30 gi√¢y</Text>
              </div>
              <div>
                <Text strong>Ch·ª©c nƒÉng: </Text>
                <Text>T·∫°o c√¢u h·ªèi Marxist t·ª± ƒë·ªông</Text>
              </div>
            </Space>
          </Card>
        </Col>
      </Row>

      <Divider />

      {/* Custom Prompt Test */}
      <Card title="Test Custom Prompt" className="mb-6">
        <Row gutter={[16, 16]}>
          <Col xs={24} lg={16}>
            <div className="mb-4">
              <Text strong>Nh·∫≠p prompt ƒë·ªÉ test:</Text>
            </div>
            <TextArea
              rows={4}
              placeholder="Nh·∫≠p c√¢u l·ªánh ƒë·ªÉ test Gemini AI..."
              value={customPrompt}
              onChange={(e) => setCustomPrompt(e.target.value)}
              className="mb-4"
            />
            <Button
              type="primary"
              icon={<SendOutlined />}
              onClick={testCustomPrompt}
              loading={isCustomTesting}
              disabled={!customPrompt.trim()}
              className="bg-blue-600 hover:bg-blue-700"
            >
              G·ª≠i test
            </Button>
          </Col>

          <Col xs={24} lg={8}>
            <div className="mb-4">
              <Text strong>Prompt m·∫´u:</Text>
            </div>
            <Space direction="vertical" className="w-full">
              {samplePrompts.map((prompt, index) => (
                <Button
                  key={index}
                  block
                  size="small"
                  icon={<BulbOutlined />}
                  onClick={() => setCustomPrompt(prompt)}
                >
                  {prompt}
                </Button>
              ))}
            </Space>
          </Col>
        </Row>

        {/* Test Result */}
        {(isCustomTesting || testResult) && (
          <>
            <Divider />
            <div>
              <Text strong>K·∫øt qu·∫£:</Text>
              {isCustomTesting ? (
                <div className="text-center py-4">
                  <Spin size="large" />
                  <div className="mt-2">ƒêang x·ª≠ l√Ω...</div>
                </div>
              ) : (
                <div className="bg-gray-50 p-4 mt-2 rounded">
                  <pre className="whitespace-pre-wrap">{testResult}</pre>
                </div>
              )}
            </div>
          </>
        )}
      </Card>

      {/* Documentation */}
      <Card title="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng">
        <Row gutter={[24, 24]}>
          <Col xs={24} md={12}>
            <Title level={5}>üîç Ki·ªÉm tra k·∫øt n·ªëi</Title>
            <Paragraph>
              S·ª≠ d·ª•ng n√∫t "Ki·ªÉm tra k·∫øt n·ªëi" ƒë·ªÉ verify r·∫±ng API key v√† endpoint ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.
            </Paragraph>

            <Title level={5}>‚úèÔ∏è Test Custom Prompt</Title>
            <Paragraph>
              Nh·∫≠p prompt t√πy ch·ªânh ƒë·ªÉ test kh·∫£ nƒÉng generate content c·ªßa Gemini AI. 
              C√≥ th·ªÉ s·ª≠ d·ª•ng c√°c prompt m·∫´u b√™n c·∫°nh.
            </Paragraph>
          </Col>

          <Col xs={24} md={12}>
            <Title level={5}>‚ö†Ô∏è L∆∞u √Ω</Title>
            <ul>
              <li>ƒê·∫£m b·∫£o API key c·ªßa Gemini h·ª£p l·ªá</li>
              <li>Ki·ªÉm tra k·∫øt n·ªëi internet</li>
              <li>Prompt n√™n r√µ r√†ng v√† c·ª• th·ªÉ</li>
              <li>Timeout m·∫∑c ƒë·ªãnh l√† 30 gi√¢y</li>
            </ul>

            <Title level={5}>üìä Troubleshooting</Title>
            <ul>
              <li><Text code>401 Error</Text>: Ki·ªÉm tra API key</li>
              <li><Text code>429 Error</Text>: V∆∞·ª£t qu√° rate limit</li>
              <li><Text code>Timeout</Text>: Th·ª≠ l·∫°i sau √≠t ph√∫t</li>
            </ul>
          </Col>
        </Row>
      </Card>
    </div>
  );
};

export default GeminiTestPage; 